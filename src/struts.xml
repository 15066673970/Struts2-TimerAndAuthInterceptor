<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

<struts>

    <constant name="struts.enable.DynamicMethodInvocation" value="false" />
    <constant name="struts.devMode" value="true" />


    <package name="default" namespace="/" extends="struts-default" >
    	<!--  step1的配置文件 -->
    
    	<interceptors>
    		<interceptor name="timerInterceptor" class="com.jinan.www.interceptor.TimerInterceptor"></interceptor>
   			<!-- 这是step2的注册拦截器并且自定义拦截器栈部分 -->
   			<interceptor name="authInterceptor" class="com.jinan.www.interceptor.AuthInterceptor"></interceptor>
			<interceptor-stack name="myStack">
				<interceptor-ref name="defaultStack"></interceptor-ref>
				<interceptor-ref name="authInterceptor"></interceptor-ref>
			</interceptor-stack>
			<!-- step2 end -->
    	</interceptors>
    
		<action name="testAction1" class="com.jinan.www.actions.TestAction" method="execute">
		<!-- 如果使用了自定义的拦截器，那么系统默认的拦截器就不会生效了。所以要显示的调用一下 -->
			<interceptor-ref name="defaultStack"></interceptor-ref>
			<interceptor-ref name="timerInterceptor"></interceptor-ref>
			<result name="success">/WEB-INF/jsp/test_start_end.jsp</result>
		</action>
		<action name="testAction2" class="com.jinan.www.actions.TestAction" method="login">
			<result name="success">/WEB-INF/jsp/test_start_end.jsp</result>
			<result name="login">/test_start.jsp</result>
		</action>
		<!-- step1  end -->
		<!-- step2 start -->
		<action name="authAction" class="com.jinan.www.actions.AuthAction" method="execute">
			<result name="success">/WEB-INF/jsp/test_start_end.jsp</result>
			<result name="login">/test_start.jsp</result>
		</action>
		
			<!-- 注册拦截器 -->
    		<!-- 注册自己的拦截器，同时定义了拦截器栈 -->
		
	
		<action name="authAction2">
			<interceptor-ref name="myStack"></interceptor-ref>
			<result name="success">/WEB-INF/jsp/test_start_end.jsp</result>
			<result name="login">/test_start.jsp</result>
		</action>
		
		<action name="paramAction" class="com.jinan.www.actions.ParamAction">
			<result name="success">/WEB-INF/jsp/test_start_param.jsp</result>
		</action>
		
		<!-- step2 end -->
		
		
		
		<!-- step8 start  -->
		<action name="testValidation" class="com.jinan.www.actions.TestValidationAction">
			<result name="success">/WEB-INF/jsp/test-validation-end.jsp</result>
			<result name="input">/WEB-INF/jsp/input.jsp</result>
		</action>
		<action name="testValidation1login" class="com.jinan.www.actions.TestValidation1Action">
			<result name="success">/WEB-INF/jsp/test-validation1-end.jsp</result>
			<result name="input">/WEB-INF/jsp/input.jsp</result>
		</action>
		<action name="testValidation1register" class="com.jinan.www.actions.TestValidation1Action">
			<result name="success">/WEB-INF/jsp/test-validation1-end.jsp</result>
			<result name="input">/WEB-INF/jsp/input.jsp</result>
		</action>
		<!-- step8 end  -->
    <!-- step7 start -->
    	<action name="testActionConverter" class="com.jinan.www.actions.TestActionConverter">
    		<result name="success">/WEB-INF/jsp/test-converter-end.jsp</result>
    		<result name="input">/WEB-INF/jsp/input.jsp</result>
    	</action>
    <!-- step7 end -->
	<!-- step9 start -->
		<action name="testUpload" class="com.jinan.www.actions.TestUploadAction">
			<result name="success">/WEB-INF/jsp/test-fileupload-end.jsp</result>
		</action>
		
		<action name="testDownload" class="com.jinan.www.actions.TestDownloadAction">
				<param name="inputPath">/WEB-INF/jsp/test-filedownload-end.jsp</param>
				<result type="stream">
					<param name="inputName">tarFile</param>
					<param name="contentType">text/plain</param>
					<param name="contentDisposition">attachment;filename="test-filedownload-end.jsp"</param>
				</result>
		</action>
		<!-- 第一个param元素为action中的属性inputPath动态赋值，该参数的值指定了将要被下载的文件资源位置，我们此处指定的web应用根目录下的一张图片
		结果类型result，该元素的默认type属性为dispather表示分发的意思，而我们此处的stream表示流的意思，它将返回给浏览器一个InputStream（被下载文件的入口）。
		其中它配置了inputName，该参数的值对应于action中getXXXX方法，当接受到请求的时候，框架会通过该参数匹配调用action中的getXXXX方法，该方法会根据指定资源路径返回该文件的入口InputStream，交给浏览器。
		contentType参数指定了该文件的类型，和互联网MIME标准中的规定类型一致，例如：text/plain代表纯文本，text/xml表示XML，image/gif代表GIF图片，image/jpeg代表JPG图片等。
		contentDisposition参数表示被下载文件在保存时候的文件名，它有两个属性值。第一个属性值可以是inline或者attachment，它指定浏览器是直接打开还是下载，filename指定了下载或者打开文件的名称。
		
		 -->		
	<!-- step9 end -->

    </package>
	

	
    <!-- Add packages here -->

</struts>
