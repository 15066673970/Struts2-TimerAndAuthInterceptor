本实例是struts2如何创建以及如何自定义拦截器的demo

1---
	去struts2的app文件夹里面找到struts2-blank.war项目解压，然后去web-inf/lib目录下拷贝所有的jar文件
	这些jar文件就是构建一个基础的struts2项目所必须得jar文件，拷贝完成后放到web项目WebContent/WEB-INF/lib
	目录下。在lib目录下选中所有拷贝来的jar文件，鼠标右键，build path   添加到build path  ，然后就能在
	Referenced Libraries目录下看到已经加载了所有的jar文件。
2---
	拷贝web.xml 和Struts.xml 到你自己对应的工程目录下。
	web.xml位置struts2-blank\WEB-INF下			-->WebContent\WEB-INf下
	struts.xml位置struts2-blank\WEB-INF\src\java  --> 工程src目录下
3---
	稍微修改一下刚才拷贝的配置文件。
	
	
	
----配置action并自定义一个用来计算action执行时间的拦截器。
step1---test_start.jsp   和web-inf下的test_start_end.jsp
	TestAction.java
	TimerInterceptor.java
	struts.xml

	
	
	
step2---自定义一个用来控制用户访问权限的拦截器(当你登录后如果输入authAction2也会跳转到成功的界面，是因为你
		在访问authAction1登录的时候使用session注入的登录信息，而在输入authAction2访问的时候，我们
		使用自定义的拦截器来获取session是否有值，有值就直接跳转到登录的界面，从而实现了访问权限的校验，而且
		此处使用的是domianModel形式获取的值。
		test_start.jsp   和web-inf下的test_start_end.jsp
		AuthAction.java
		AuthInterceptor.java
		struts.xml
		User.java	

step3---测试前后台传递参数的方法以及显示	
		前台传参到后台的方式有三种。1-属性的方式，2-javabean形式也叫demianModel形式，3-ModelDriven形式
		其中12两种方法是不同的地方就是2中是在action里面声明private User user;并且提供user的getter和setter方法
		1中
		--1，直接在action中写属性，属性名称随便起，只要提交的jsp能够对应起来就行，然后取值的jsp页面也是一样的名字。
		--2，在action中要有getter setter方法
		2中
		--1，需要写实体类User getset方法
		--2，提供对象属性，不需要实例化，在当前action里面提供getset方法   --private User user;
		--3，提交数据的jsp里面的字段属性得写成  实体类.属性的方式
		--4，显示数据的时候需要写成<s:property value="user.userName"/>
		3中不同：
		--1，需要写实体类student，
		--2，action需要实现ModelDriven接口，并且指定泛型Object
		--3，提供实例化对象  private Student student=new Student();
		--4，重写getModel()方法，返回student
		--5，提供execute()方法。
		--6，对应的jsp页面name属性是实体类的属性名字，成功页面的jsp取值的时候也是实体类属性名<s:property value="name"/><br/>
		含：
		test_start.jsp test_start_param.jsp
		ParamAction.java
		struts.xml	
	
step4---Convention插件的约定    https://blog.csdn.net/qq_35326718/article/details/71056629	
		struts2-convention-plugin-2.3.32.jar
		1.Action的搜索和映射约定
			之前我们自定义一个Action是需要在Struts.xml中通过action元素的name和class实现请求和响应映射，现在我们可以使用插件省去在struts.xml中配置的过程。我们的Convention插件会自动搜索所有位于action,actions,struts,struts2包下的Java类，遇到以下两种情况，就会把该Java类当做Action处理。
				实现了com.opensymphony.xwork2.Action的Java类
				类名类似于：xxxAction的Java类
			对于以上两种情况，插件才能够自动识别这是一个Action，还有一点需要注意的是，该插件一般只会在上述提到的四个包中搜索Java类，如果想要使用这种约定，一般需要将Java类的包命名为以上四种之一。当然是可以通过配置修改这些默认搜索的包的，后文介绍。
			以上介绍了如何利用约定让核心拦截器可以通过插件搜索到具体的Action，下面介绍如何让这些Action能够对应于具体的URL请求。我们知道在Java中，对于一个类的命名是依照驼峰式命名规范来的（每个单词的首字母大写，其余字符小写），所以插件在解析的时候会利用这个规范，例如下面的一些例子：
				Action：MyInfo------------URL：my-info
				Action：UserMessage-------URL：user-message
			上述的这种方式定义的Action在解析成URL的时候，会拆分成一个一个的单词，单词之间使用中划线连接。连接之后的结果作为该Action对应的URL。
			还有一种方式定义的Action，在定义Java类的时候命名以XXXAction的形式，也会被解析为一个Action。插件在解析它的时候就简单了，去掉后面的Action，剩下的就是该Action对应的URL。例如：
				Action：MyAction------------URL：my
				Action：UserAction----------URL：user
			有关第一个约定还有一点需要注意下，以前我们配置Action的时候都是在package元素中配置的，也就是每个Action都会有一个namespace（没有显式指明的为默认命名空间下），那么我们这种约定式的配置如何区分具有相同名称的Action了呢？Convention插件通过该Action的包进行区分，例如：
				my.action.LoginAction------URL：/login
				my.actions.user.LoginAction----URL：/user/login
				him.struts.name.LoginAction----URL：/name/login
				her.struts2.age.LoginAction----URL：/age/login	
			如上所示，Convention通过该Action的包来指定namespace的值。	
				
				
		2.按约定映射结果
			接下来我们看看第二个约定，按约定映射结果。默认情况下，Convention总会到WEB-INF/content路径下查找视图资源，也就是根据Action返回的字符串组装视图资源的逻辑 名称。例如：LoginAction返回的SUCCESS，插件会到content目录下找login-success.jsp或者login-success.html。这种组装的格式为：actionName-resultCode.suffix。
			当然啊，这个目录是默认的，后面我们会介绍通过配置指定成我们想用的目录。下面我们通过具体的例子完整的感受下
			
						
		3.Action链式约定
			之前介绍过，可以通过指定result元素的type属性值为redirectAction来使得Action的返回结果继续指向另外一个Action，从而形成链式Action。那么我们如何约定链式Action呢？我们只要将第二个Action的Java类放在和第一个Action的Java类同目录，并依照约定命名第二个Action即可。第二个Action的命名规则如下：firstActionName+resultCode
step5---struts2标签
		基本控制标签：https://blog.csdn.net/qq_35326718/article/details/71215395
			property获取属性标签
			if/else/else if逻辑判断标签
			iterator迭代标签
			append组合集合标签
			generator拆分字符串标签
			merge组合集合标签（处理方式和append不一样）
			subset获取子集合标签
			sort排序标签
		数据标签: https://blog.csdn.net/qq_35326718/article/details/71521985
			action标签：用于在视图页面跳转到一个Action
			bean标签：用于创建一个Javabean实例，按需保存到context中
			date标签：用于格式化输出一个日期
			debug标签：用于调试查看ognl上下文中内容
			include标签：用于包含其他的jsp或者servlet页面资源
			param标签：主要配合别的标签作为子标签使用
			push标签：用于将某个值放入到root栈顶
			set标签：设置一个新变量，放入指定范围
			url标签：用于生成一个URL地址
		ui标签：https://blog.csdn.net/q547550831/article/details/53326042
			form标签：
				form
				submit
				textfield
				textarea
				password
				radio
				checkboxlist
				checkbox
				select
				hidden
				reset
				file
			Non-form标签：生成HTML页面非表单元素
			Ajax标签：提供ajax技术支持
			
	
		Struts2的模板和主题
	     Struts2的UI标签都是基于模板和主题的。所谓模板，就是一些代码，Struts2标签使用这些代码渲染生成相应的HTML代码。模板是一个UI标签的外在表现形式，并且每个标签都会有自己对应的模板。如果为所有的UI标签提供样式和视觉效果相似的模板， 那么这一系列的模板就形成了一个主题。
	     Struts2 默认提供了4 种主题，分别为 simple、xhtml、css_xhtml和Ajax。
		simple主题：这是最简单的主题，使用该主题时，每个UI标签只生成最基本的HTML元素，没有任何附加功能。
		xhtml主题：这是Struts2的默认主题，它对simple主题进行了扩展，提供了布局功能、Label显示名称、以及与验证框架和 国际化框架的集成。
		css_xhtml：该主题是xhtml的扩展，在对xhtml的基础之上添加对CSS的支持和控制。
		Ajax：继承自对xhtml，提供 Ajax支持。	
		这4种内建主题中，xhtml为默认主题，但xhtml有一定的局限性。因为它使用表格进行布局，并且只支持每一行放一个表单项，这样一来，一旦遇到复杂的页面布局，xhtml就难以胜任了。此时，就需要改变Struts2的默认主题。
     	通常，通过设置常量struts.ui.theme，来改变默认主题，具体做法是在struts.xml或者struts.properties文件中增加相应的配置。比如想要设置使用simple的主题，那么需要在struts.xml中增加如下配置:
     		<constant name="struts.ui.theme" value="simple"/>
     	或者在struts.properties文件中增加如下配置:struts.ui.theme=simple
				
				
step6---namespace

step7---类型转换 自定义类型转换器
		
		类型转换使用的场景：类型转换就是指我们在客户端使用get/post或者action标签的转发到具体的action实例的时候，我们传入的参数可以自动的
		转换成action实例的实例属性的值的一个过程
		其实就是类似于使用domianModel形式从前台往后台传递参数的时候，需要在前台页面中使用name=user.username的形式传递参数的情况（这种使用场景）
		
		Struts2内默认转换器：Struts2中默认有一个类型转换器，可以帮助我们完成大部分的自动转换操作，其支持的从String类型转换的目标类型如下：
			boolean和Boolean：字符串true会转换为布尔类型值true
			char和Character：字符串转字符
			int和Integer：字符串转整型类型
			long和Long：字符串转长整型
			float和Float：字符串转单精度浮点型
			double和Double：字符串转双精度浮点型
			Date：字符串转日期类型，需要字符串满足一定的格式
			数组：多个input表单提交给同一个Action的属性，就会构成一个数组传入到该属性中
			集合：和数组类似，需要指定了的类型，并且类型不能超出基本数据类型
		对于我们在Action中声明的属性的类型，如果是以上的这些类型的话，那么从客户端提交的过来的字符串就可以默认使用该机制自动转换成对应的类型，完成自动赋值。
			
		基于OGNL的类型转换 （domianModel形式）本质还是调用struts的默认转换器
			例子-集合：action里面：private List<Walker> list; setList，getList方法
					jsp里面：	<s:textfield name="list[0].username" label="用户名"/>
							<s:textfield name="list[0].age" label="年龄"/>
			例子-map:action里面： private Map<String,Walker> map; getMap，setMap方法
					jsp里面：	<s:textfield name="map['1'].username" label="用户名"/>
        					<s:textfield name="map['1'].age" label="年龄"/>
        					
                       自定义类型转换器	继承TypeConverter接口并实现其中的唯一方法convertValue方法，该方法相当复杂，好在框架为我们提供了实现类DefaultTypeConterver
               		  我们可以重写convertValue的任意一个重载来完成自定义类型转换器。	
                   test-converter-start.jsp test-converter-end.jsp 
                   TestActionConverter.java  【需要在里面以属性的方式注入提交页面的属性】
                   PConvert.java 自定义类型转换器，extends DefaultTypeConverter类并重写对应参数的方法
                   TestActionConverter-conversion.properties 【actionName名字-conversion.properties文件用来告诉web使用哪个类型转换器（内容：类型=转换器类的位置）】
                   
                   
                       	
		类型转换器：
			局部范围类型的转换器，	actionName-conversion.properties 例如f：LoginAction-conversion.properties
						内容：// 属性名=转换器类的位置
							walker=MyPackage.WalkerConvert 创建的该文件应该和对应的Action位于同一个包下
			全局范围内注册一个类型转换器，xwork-conversion.properties
						内容：// 属性名=转换器类的位置
							walker=MyPackage.WalkerConvert
			使用注解注册一个类型转换器 (略)
		
		类型转换的错误处理 ：
		
			框架为我们在拦截器栈中注册了一个拦截器：convertionError，该拦截器专门用于拦截类型转换异常，
			一旦该拦截器拦截到异常产生则会封装所有的异常信息到ActionContext中，然后跳转到input处理结果页面，
			所以一般我们在为Action添加处理结果的时候会为其添加一个input页面
			我们只需要为Action添加一个input的处理结果即可，当发生类型转换失败的时候就会封装错误信息并跳转到input页面。

setp8----数据校验
		
		命名：且一般一个校验文件只服务一个Action   <ActionName>-validation.xml
		两种校验配置风格 
			1.用field元素来配置的数据校验规则
				该文件有个根元素 validators ，使用field 作为一级子元素，该元素将对应于Action实例中实际的属性，它有一个name属性，
				该属性就是用于指定此field元素配置的是Action的哪个实例属性，有几个实例属性就应该有几个field元素。
				我们由field元素可以定位到Action实例中具体的某个属性，使用field-validator元素
				为给属性指定校验器（Struts默认提供的检验器，具体有关内置的校验器后文详细介绍），
				param 元素用于指定校验的参数，message元素用于指定不符合校验规则时输出的信息。
			2.使用validator取代field作为一级子元素，用fieldName属性指定对应的Action实例属性（不常用）
			
				test-validation-start.jsp	test-validation-end.jsp input.jsp
				TestValidationAction.java TestValidationAction-validation.xml
				
		为不同Action处理逻辑配置不同的校验配置
			同一个action有多个不同的处理逻辑，例如某个action既可以处理用户注册请求也可以处理用户登录请求，但是对于这两种截然不同的请求，
			我们的数据校验却不尽相同,两个页面login和register，虽然提交的action名称不一样，但是却是同一个action.java文件
			此时我们需要创建两个数据校验文件，一个用于校验请求login，一个用于校验请求regist。规则：<ActionName>-<ActionAliasName具体的action名>-validation.xml
			TestValidation1Action-testValidation1login-validation.xml
			TestValidation1Action-testValidation1register-validation.xml
			TestValidation1Action.java
			test-validation1-login.jsp test-validation1-register.jsp
		 	test-validation1-end.jsp input.jsp
		 	
			 
			 
		详解struts2框架内置的几种校验器 
			xwork-core-2.3.32.jar
			/com/opensymphony/xwork2/validator/validators/default.xml
		自定义校验器
			在actionsupport中定义一个方法volidate()方法
			对于之前介绍的一个Action类响应多个请求时候对数据校验的不同形态，在我们自定义校验器中也是可以实现的，只是定义的方法名有所区别，例如：
				响应login处理逻辑的自定义校验方法命名为：validateLogin()
				响应regist处理逻辑的自定义校验方法命名为：validateRegist()
step9---文件上传下载
		上传：
			想要实现文件上传功能，页面的表单的method属性必须被指定为post，还有enctype属性必须为multipart/form-data，该值表示上传的内容将会以二进制的形式被上传到服务器
			在Struts的文件上传中，它使用三个Action属性来描述被上传的文件。commons-fileupload-1.3.2.jar和commons-io-2.2.jar这两个包就是用于辅助表单上传的内容赋值到action属性中
			test-fileupload-start.jsp test-fileupload-end.jsp
			TestUploadAction.java
			
			总体上看来，实际上还是使用了三个action实例属性对上传文件相关信息的封装。
			一个属性封装的是该上传文件的二进制内容，一个属性封装该文件的文件名称，一个属性封装的是该文件的文件类型。
			实际上把控好这三个属性，基本可以完成对该上传文件的所有操作。
		下载：
			广义上的文件下载，其实可以使用a标签链接到对应的资源完成对资源的下载，但是在浏览器中使用这种方式会导致浏览器直接打开该资源文件而并不是弹出下载框指定下载位置。
			Struts2下载机制通过配置result元素的type属性为stream来实现。在类型为stream的result元素中可以配置一些参数，主要有以下：
				
				contentType：指定被下载文件的文件类型
				inputName：指定被下载文件的输入流入口
				contentDisposition：制定下载文件的文件名
				bufferSize：指定下载文件的缓冲大小
			test-filedownload-start.jsp test-filedownload-end.jsp
			TestDownloadAction.java 要定义一个方法，该方法会根据指定资源路径返回该文件的入口InputStream，交给浏览器。
			
			具体的action的 配置：
			<action name="testDownload" class="com.jinan.www.actions.TestDownloadAction">
				<param name="inputPath">/WEB-INF/jsp/test-filedownload-end.jsp</param>
				<result type="stream">
					<param name="inputName">tarFile</param>
					<param name="contentType">text/plain</param>
					<param name="contentDisposition">attachment;filename="test-filedownload-end.jsp"</param>
				</result>
			</action>
			第一个param元素为action中的属性inputPath动态赋值，该参数的值指定了将要被下载的文件资源位置，我们此处指定的web应用根目录下的一张图片
			结果类型result，该元素的默认type属性为dispather表示分发的意思，而我们此处的stream表示流的意思，它将返回给浏览器一个InputStream（被下载文件的入口）。
			其中它配置了inputName，该参数的值对应于action中getXXXX方法，当接受到请求的时候，框架会通过该参数匹配调用action中的getXXXX方法，该方法会根据指定资源路径返回该文件的入口InputStream，交给浏览器。
			contentType参数指定了该文件的类型，和互联网MIME标准中的规定类型一致，例如：text/plain代表纯文本，text/xml表示XML，image/gif代表GIF图片，image/jpeg代表JPG图片等。
			contentDisposition参数表示被下载文件在保存时候的文件名，它有两个属性值。第一个属性值可以是inline或者attachment，它指定浏览器是直接打开还是下载，filename指定了下载或者打开文件的名称。

		
	
	
